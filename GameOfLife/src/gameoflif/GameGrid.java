/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gameoflif;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.util.Random;

/**
 *
 * @author 348983139
 */
public class GameGrid extends javax.swing.JPanel {

    /**
     * Creates new form GameGrid
     */
    //Creates an object engine to call the methods in the engine
    GameOfLifeEngine engine = new GameOfLifeEngine();
    //Global variables for row and column length
    int rows;
    int cols;
    //Global variables for graphics and timer are created so it can be used in the frame
    //to draw the grid and start or stop the animations
    Graphics g;
    Timer t;

    public GameGrid() {
        rows = engine.lastTurn.length;
        cols = engine.lastTurn.length;
        //Initialize the grid to set all cells to dead
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                engine.lastTurn[i][j] = false;
            }
        }
    }

    //Sets the timer to refresh every 2 seconds
    //Starts the timer
    public void anim() {
        t = new Timer(2000, new TimerListener());
        t.start();

    }

    //This will execute when timer starts
    //Draws the grid every turn as the program decides which cells survive
    private class TimerListener implements ActionListener {

        public void actionPerformed(ActionEvent a) {
            drawGrid(getGraphics());
            repaint();
        }

    }

    //This will be where the drawing of the initial game grid occurs
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        initialGrid(g);
    }

    //Draws the initial or starting grid

    public void initialGrid(Graphics g) {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (engine.lastTurn[i][j] == true) {
                    //Draws cells that are alive in white
                    g.setColor(Color.white);
                    g.fillRect((getWidth() / rows) * i, (getHeight() / cols) * j, getWidth() / rows, getHeight() / cols);

                } else {
                    //Draws dead cells in black
                    g.setColor(Color.black);
                    g.fillRect((getWidth() / rows) * i, (getHeight() / cols) * j, getWidth() / rows, getHeight() / cols);
                }
                //Draw lines of the grid in yellow
                g.setColor(Color.yellow);
                g.drawRect((getWidth() / rows) * i, (getHeight() / cols) * j, getWidth() / rows, getHeight() / cols);

            }
        }
    }

    //Calls the survives method to check which cells will survive or be born in each turn
    //Then using the same method that draws the initial grid to draw the new grid with changes

    public void drawGrid(Graphics g) {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                engine.survives(i, j);

            }
        }
        initialGrid(g);
        engine.updateBoard(rows, cols);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
